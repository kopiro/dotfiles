# ZSH things
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME=robbyrussell
plugins=(
    gitfast 
    osx 
    jsontools 
    last-working-dir 
    npm 
    zsh-syntax-highlighting 
    colored-man 
    colorize 
    common-aliases 
    brew 
    copyfile 
    docker 
    encode64
    sudo
    z
    alias-tips
    vscode
)

alias please='sudo'

alias dotenv='export $(cat .env | xargs)'

alias dc='docker-compose'
alias dcu='docker-compose up'
alias dcub='docker-compose up --build'
alias dkill='docker rm -f $(docker container ls -aq)'
alias derase='docker system prune --all --force --volumes'

alias socat-x11='open -a XQuartz && socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\"'
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chrome-debug="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --remote-debugging-port=9222"

ip() {
	ifconfig en0 | grep "inet " | cut -d " " -f 2
}

whatbranch() {
	git rev-parse --abbrev-ref HEAD 2>/dev/null
}

gam() {
	branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
	if [ "$branch" = "master" ]; then
		echo "Sorry, I can't do this when you're on master"
		exit 1
	fi
	git commit -n --amend && 
	git push -f
}

got() {
   git add -A &&
   git commit -m "$1"
}

gush() {
	git add -A &&
	git commit -m "$1" &&
	git push
}

gull() {
	git pull &&
	git submodule sync --recursive && 
	git submodule update --init --recursive
}

# Find all NEF in current directory and convert into JPG using all processors
neftojpg() {
 	mkdir -p ./JPG
 	find . -name "*.NEF" -print0 | xargs -0 -P $(sysctl -n hw.ncpu) -I file sips -s format jpeg file --out ./JPG/file.jpg
}

# Do a npm version $1 and publish over NPM and GIT
npmver() {
   	npm version "$1" &&
   	npm publish &&
   	git push &&
   	git push --tags
}

# Enable TOR proxy system wide
tor-enable-proxy() {
	INTERFACE=$1
	if [ -z $INTERFACE ]; then
		INTERFACE="Wi-Fi"
	fi

	# Ask for the administrator password upfront
	sudo -v

	# Keep-alive: update existing `sudo` time stamp until finished
	while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

	# trap ctrl-c and call disable_proxy()
	function disable_proxy() {
		sudo networksetup -setsocksfirewallproxystate $INTERFACE off
		echo "$(tput setaf 64)" #green
		echo "SOCKS proxy disabled."
		echo "$(tput sgr0)" # color reset
	}
	trap disable_proxy INT

	# Let's roll
	sudo networksetup -setsocksfirewallproxy $INTERFACE 127.0.0.1 9050 off
	sudo networksetup -setsocksfirewallproxystate $INTERFACE on

	echo "$(tput setaf 64)" # green
	echo "SOCKS proxy 127.0.0.1:9050 enabled."
	echo "$(tput setaf 136)" # orange
	echo "Starting Tor..."
	echo "$(tput sgr0)" # color reset

	tor
}

# Backup all repositories in a root direectory in a GZIP
backup-repos() {
	for i in $(find . -type d -maxdepth 1 -mindepth 1); do 
		echo "Looking in $i..."
		if [ -d "$i/.git" ]; then
			echo "Found repository in $i, init backup..."
			pushd $i > /dev/null
			zip_name="$i-$(date +'%y%m%d').zip"
			zip_path="/opt/backups/$zip_name"
			echo "ZIP path: $zip_path"
			if [ ! -f "$zip_path" ]; then
				echo "Backing up..."
				git archive --format=zip --output="$zip_path" master
			else
				echo "ZIP $zip_path already exists, ignoring!"
			fi
			popd > /dev/null
		fi
	done
}

# Spawn a simple HTTP server
http-server() {
	port=${1:=8080}
    open "https://localhost:${port}"
    python3 -m SimpleHTTPServer
}

# Spawn a simple HTTPS server
https-server() {
	port=${1:=8443}
    if [ ! -f /tmp/server.crt ]; then
        openssl genrsa -aes256 -passout pass:password -out /tmp/server.key 2048
        openssl req -new -key /tmp/server.key -passin pass:password -out /tmp/server.csr
        openssl x509 -req -passin pass:password -days 1024 -in /tmp/server.csr -signkey /tmp/server.key -out /tmp/server.crt
        openssl rsa -in /tmp/server.key -out /tmp/server_no_pass.key -passin pass:password
        mv /tmp/server_no_pass.key /tmp/server.key
        cat /tmp/server.crt /tmp/server.key > server.pem
    fi
    pip install twisted pyOpenSSL
    open "https://localhost:${port}"
    twistd -no web --path . --https=${port} -c /tmp/server.crt -k /tmp/server.key
}

work-start() {
	if [ -z "$1" ]; then
		echo "Please specify an issue: work-start 1234"
		return
	fi
	issue="$JIRA_PREFIX-$1"
	git checkout master &&
	git pull origin master &&
	git checkout -b "$issue" &&
	jira assign "$issue" "$(whoami)" &&
	jira in-progress "$issue" &&
	jira view "$issue"
}

work-review() {
	jira transition "Review" "$(whatbranch)" &&
	git open
}

work-done() {
	jira done "$(whatbranch)"
}

# iTerm shell integration
test -e ~/.iterm2_shell_integration.zsh && source ~/.iterm2_shell_integration.zsh

if [[ $(date +"%d%m") =~ ^2[4-6]12$ ]]; then   
  echo "Merry Christmas ðŸŽ…"  
fi

if [ "$(date +"%A")" = "Sunday" ]; then
	echo "Oh... com'on ðŸ˜°, it's Sunday, go back to sleep! ðŸ›Œ"
fi

# Variables
export CC="gcc"
export CXX="g++"
export EDITOR=nano
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANGUAGE=en
export LANG=en
export NODE_PATH=/usr/local/lib/node_modules
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
export TITANIUM_SDK=~/Library/Application\ Support/Titanium/mobilesdk/osx
export GOOGLE_APIS=/opt/android/add-ons/addon-google_apis-google-23
export JAVA_HOME=`/usr/libexec/java_home`
export BREW_PATH=`brew --prefix`
export ANDROID_SDK=~/Library/Android/sdk
export ANDROID_NDK=~/Library/Android/sdk/ndk-bundle
export NDK_CCACHE=/usr/local/bin/ccache
export NUM_CPUS=8
export NODE_ENV=development
export USE_SDK_WRAPPER=1
export JIRA_PREFIX="HYP"

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"

# Path
PATH=''
PATH=$PATH:~/.composer/vendor/bin
PATH=$PATH:~/Library/Android/sdk/tools
PATH=$PATH:~/Library/Android/sdk/build-tools
PATH=$PATH:~/Library/Android/sdk/platform-tools
PATH=$PATH:~/Library/Android/sdk/tools/bin
PATH=$PATH:/opt/bin
PATH=$PATH:/usr/local/bin
PATH=$PATH:/usr/local/sbin
PATH=$PATH:/usr/bin
PATH=$PATH:/usr/sbin
PATH=$PATH:/bin
PATH=$PATH:/sbin
export PATH
