# ZSH things
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME=gnzh
plugins=(git osx jsontools last-working-dir npm sublime zsh-syntax-highlighting colored-man colorize)

# Aliases

alias dc="docker-compose"
alias dcu="docker-compose up --build"
alias dcud="docker-compose up -d --build"

dkill() {
	# Kill all running containers
	docker ps -q | xargs docker kill
}

dprune() {
	# Prune unused objects
	docker system prune --all --force
}

drm() {
	# Remove everything in docker (including volumes)
	docker stop $(docker container ls -a -q)
	docker system prune -a -f --volumes
}

g-del-branch() {
	# Delete a branch locally and remotely
   git branch -d $1 &&
   git push origin --delete $1
}

g-del-alltags() {
	# Delete all GIT tags locally and remotely
   git tag -l | xargs -n 1 git push --delete origin &&
   git tag | xargs git tag -d
}

gam() {
	# Commit and push everything forcely
   git add -A && 
   git commit --amend && 
   git push -f
}

got() {
	# Commit everything
   git add -A &&
   git commit -m "$1"
}

gush() {
	# Commit and push everything
	git add -A &&
	git commit -m "$1" &&
	git push
}

nef-to-jpg() {
	# Find all NEF in current directory and convert into JPG using all processors
   mkdir -p ./JPG
   find . -name "*.NEF" -print0 | xargs -0 -P $(sysctl -n hw.ncpu) -I file sips -s format jpeg file --out ./JPG/file.jpg
}

npm-ver() {
	# Do a npm version $1 and publish over NPM and GIT
   npm version "$1" &&
   npm publish &&
   git push &&
   git push --tags
}

tor-enable-proxy() {
	# Start tor and configure network to proxy over TOR
   # 'Wi-Fi' or 'Ethernet' or 'Display Ethernet'
	INTERFACE=$1
	if [ -z $INTERFACE ]; then
	INTERFACE="Wi-Fi"
	fi

	# Ask for the administrator password upfront
	sudo -v

	# Keep-alive: update existing `sudo` time stamp until finished
	while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

	# trap ctrl-c and call disable_proxy()
	function disable_proxy() {
		sudo networksetup -setsocksfirewallproxystate $INTERFACE off
		echo "$(tput setaf 64)" #green
		echo "SOCKS proxy disabled."
		echo "$(tput sgr0)" # color reset
	}
	trap disable_proxy INT

	# Let's roll
	sudo networksetup -setsocksfirewallproxy $INTERFACE 127.0.0.1 9050 off
	sudo networksetup -setsocksfirewallproxystate $INTERFACE on

	echo "$(tput setaf 64)" # green
	echo "SOCKS proxy 127.0.0.1:9050 enabled."
	echo "$(tput setaf 136)" # orange
	echo "Starting Tor..."
	echo "$(tput sgr0)" # color reset

	tor
}

backup-repos() {
	for i in $(find . -type d -maxdepth 1 -mindepth 1); do 
		echo "Looking in $i..."
		if [ -d "$i/.git" ]; then
			echo "Found repository in $i, init backup..."
			pushd $i > /dev/null
			zip_name="$i-$(date +'%y%m%d').zip"
			zip_path="/opt/backups/$zip_name"
			echo "ZIP path: $zip_path"
			if [ ! -f "$zip_path" ]; then
				echo "Backing up..."
				git archive --format=zip --output="$zip_path" master
			else
				echo "ZIP $zip_path already exists, ignoring!"
			fi
			popd > /dev/null
		fi
	done
}

git-gh() {
	git checkout gh-pages && \
	git fetch --all && \
	git reset --hard origin/master && \
	git push -f
}

# Variables
export CC="gcc"
export CXX="g++"
export EDITOR=nano
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANGUAGE=en
export LANG=en
export NODE_PATH=/usr/local/lib/node_modules
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
export TITANIUM_SDK=~/Library/Application\ Support/Titanium/mobilesdk/osx
export GOOGLE_APIS=/opt/android/add-ons/addon-google_apis-google-23
export JAVA_HOME=`/usr/libexec/java_home`
export BREW_PATH=`brew --prefix`
export ANDROID_SDK=~/Library/Android/sdk
export ANDROID_NDK=~/Library/Android/sdk/ndk-bundle
export NDK_CCACHE=/usr/local/bin/ccache
export NUM_CPUS=8
export NODE_ENV=development
export USE_SDK_WRAPPER=1

# Path
PATH=''
PATH=$PATH:~/.composer/vendor/bin
PATH=$PATH:~/Library/Android/sdk/tools
PATH=$PATH:~/Library/Android/sdk/build-tools
PATH=$PATH:~/Library/Android/sdk/platform-tools
PATH=$PATH:~/Library/Android/sdk/tools/bin
PATH=$PATH:/opt/bin
PATH=$PATH:/usr/local/bin
PATH=$PATH:/usr/local/sbin
PATH=$PATH:/usr/bin
PATH=$PATH:/usr/sbin
PATH=$PATH:/bin
PATH=$PATH:/sbin
export PATH

# iTerm shell integration
test -e ${HOME}/.iterm2_shell_integration.zsh && source ${HOME}/.iterm2_shell_integration.zsh

# Load NVM
export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"